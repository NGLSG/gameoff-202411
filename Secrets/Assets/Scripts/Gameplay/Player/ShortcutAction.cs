//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Gameplay/Player/ShortcutAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ShortcutAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ShortcutAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""ShortcutAction"",
    ""maps"": [
        {
            ""name"": ""Shortcuts"",
            ""id"": ""3026bed9-b267-40a6-83b9-9b90bd4f6a8f"",
            ""actions"": [
                {
                    ""name"": ""OpenPhone"",
                    ""type"": ""PassThrough"",
                    ""id"": ""e39aba38-3999-482e-9b30-73278527b484"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Use"",
                    ""type"": ""Button"",
                    ""id"": ""7f5f8720-fd53-40d2-95ce-d4ad74af721b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7e878450-1d9a-406b-878f-7d4d267dea51"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""OpenPhone"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5666a0a8-6b61-41dc-b8aa-3a49bcaa4e8a"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Use"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Shortcuts
        m_Shortcuts = asset.FindActionMap("Shortcuts", throwIfNotFound: true);
        m_Shortcuts_OpenPhone = m_Shortcuts.FindAction("OpenPhone", throwIfNotFound: true);
        m_Shortcuts_Use = m_Shortcuts.FindAction("Use", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Shortcuts
    private readonly InputActionMap m_Shortcuts;
    private List<IShortcutsActions> m_ShortcutsActionsCallbackInterfaces = new List<IShortcutsActions>();
    private readonly InputAction m_Shortcuts_OpenPhone;
    private readonly InputAction m_Shortcuts_Use;
    public struct ShortcutsActions
    {
        private @ShortcutAction m_Wrapper;
        public ShortcutsActions(@ShortcutAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @OpenPhone => m_Wrapper.m_Shortcuts_OpenPhone;
        public InputAction @Use => m_Wrapper.m_Shortcuts_Use;
        public InputActionMap Get() { return m_Wrapper.m_Shortcuts; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ShortcutsActions set) { return set.Get(); }
        public void AddCallbacks(IShortcutsActions instance)
        {
            if (instance == null || m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Add(instance);
            @OpenPhone.started += instance.OnOpenPhone;
            @OpenPhone.performed += instance.OnOpenPhone;
            @OpenPhone.canceled += instance.OnOpenPhone;
            @Use.started += instance.OnUse;
            @Use.performed += instance.OnUse;
            @Use.canceled += instance.OnUse;
        }

        private void UnregisterCallbacks(IShortcutsActions instance)
        {
            @OpenPhone.started -= instance.OnOpenPhone;
            @OpenPhone.performed -= instance.OnOpenPhone;
            @OpenPhone.canceled -= instance.OnOpenPhone;
            @Use.started -= instance.OnUse;
            @Use.performed -= instance.OnUse;
            @Use.canceled -= instance.OnUse;
        }

        public void RemoveCallbacks(IShortcutsActions instance)
        {
            if (m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IShortcutsActions instance)
        {
            foreach (var item in m_Wrapper.m_ShortcutsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ShortcutsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ShortcutsActions @Shortcuts => new ShortcutsActions(this);
    public interface IShortcutsActions
    {
        void OnOpenPhone(InputAction.CallbackContext context);
        void OnUse(InputAction.CallbackContext context);
    }
}
